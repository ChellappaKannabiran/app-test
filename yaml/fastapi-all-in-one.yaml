# https://spacelift.io/blog/kubernetes-persistent-volumes#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-deployment
# Deployment specification
spec:
  # Set number of pods we require
  replicas: 1
  # Specify which  pods are managed by this deployment
  selector:
    # The label of the app below must match that in the template below
    matchLabels:
      app: fastapi-app
  # Specify a template for regular pod configuration nested inside our deployment spec.
  # When the deployment creates pods, it will create them using this template
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      serviceAccountName: default
      imagePullSecrets:
      - name: default-dockercfg-xcmp5
      - name: harbor-pull-secret
      containers:
      - name: fastapi-test
        image: harbor.stfc.ac.uk/fastapi-example/my-fastapi-test:v3.0
        volumeMounts:
          - mountPath: /code/app/db
            name: data
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: '1'
            memory: 1000Mi
          requests:
            cpu: 10m
            memory: 64Mi
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: fastapi-sql-claim
---
apiVersion: v1
kind: Service
metadata:
  name: myfastapi-service
spec:
  selector:
    app: fastapi-app
  ports:
    # Expose port 8080 of the pods and map them to port 8080 of the service
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: fastapi-route
spec:
  to:
    kind: Service
    name: myfastapi-service
  port:
    targetPort: 8080
---
